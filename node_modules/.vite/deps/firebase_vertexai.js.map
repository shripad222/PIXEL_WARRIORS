{
  "version": 3,
  "sources": ["../../@firebase/ai/src/constants.ts", "../../@firebase/ai/src/types/enums.ts", "../../@firebase/ai/src/types/schema.ts", "../../@firebase/ai/src/types/imagen/requests.ts", "../../@firebase/ai/src/public-types.ts", "../../@firebase/ai/src/backend.ts", "../../@firebase/ai/src/service.ts", "../../@firebase/ai/src/errors.ts", "../../@firebase/ai/src/helpers.ts", "../../@firebase/ai/src/models/ai-model.ts", "../../@firebase/ai/src/logger.ts", "../../@firebase/ai/src/requests/request.ts", "../../@firebase/ai/src/requests/response-helpers.ts", "../../@firebase/ai/src/googleai-mappers.ts", "../../@firebase/ai/src/requests/stream-reader.ts", "../../@firebase/ai/src/methods/generate-content.ts", "../../@firebase/ai/src/requests/request-helpers.ts", "../../@firebase/ai/src/methods/chat-session-helpers.ts", "../../@firebase/ai/src/methods/chat-session.ts", "../../@firebase/ai/src/methods/count-tokens.ts", "../../@firebase/ai/src/models/generative-model.ts", "../../@firebase/ai/src/models/imagen-model.ts", "../../@firebase/ai/src/requests/schema-builder.ts", "../../@firebase/ai/src/requests/imagen-image-format.ts", "../../@firebase/ai/src/api.ts", "../../@firebase/ai/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const AI_TYPE = 'AI';\n\nexport const DEFAULT_LOCATION = 'us-central1';\n\nexport const DEFAULT_BASE_URL = 'https://firebasevertexai.googleapis.com';\n\nexport const DEFAULT_API_VERSION = 'v1beta';\n\nexport const PACKAGE_VERSION = version;\n\nexport const LANGUAGE_TAG = 'gl-js';\n\nexport const DEFAULT_FETCH_TIMEOUT_MS = 180 * 1000;\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Role is the producer of the content.\n * @public\n */\nexport type Role = (typeof POSSIBLE_ROLES)[number];\n\n/**\n * Possible roles.\n * @public\n */\nexport const POSSIBLE_ROLES = ['user', 'model', 'function', 'system'] as const;\n\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nexport enum HarmCategory {\n  HARM_CATEGORY_HATE_SPEECH = 'HARM_CATEGORY_HATE_SPEECH',\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n  HARM_CATEGORY_HARASSMENT = 'HARM_CATEGORY_HARASSMENT',\n  HARM_CATEGORY_DANGEROUS_CONTENT = 'HARM_CATEGORY_DANGEROUS_CONTENT'\n}\n\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nexport enum HarmBlockThreshold {\n  /**\n   * Content with `NEGLIGIBLE` will be allowed.\n   */\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  /**\n   * Content with `NEGLIGIBLE` and `LOW` will be allowed.\n   */\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  /**\n   * Content with `NEGLIGIBLE`, `LOW`, and `MEDIUM` will be allowed.\n   */\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  /**\n   * All content will be allowed.\n   */\n  BLOCK_NONE = 'BLOCK_NONE',\n  /**\n   * All content will be allowed. This is the same as `BLOCK_NONE`, but the metadata corresponding\n   * to the {@link HarmCategory} will not be present in the response.\n   */\n  OFF = 'OFF'\n}\n\n/**\n * This property is not supported in the Gemini Developer API ({@link GoogleAIBackend}).\n *\n * @public\n */\nexport enum HarmBlockMethod {\n  /**\n   * The harm block method uses both probability and severity scores.\n   */\n  SEVERITY = 'SEVERITY',\n  /**\n   * The harm block method uses the probability score.\n   */\n  PROBABILITY = 'PROBABILITY'\n}\n\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nexport enum HarmProbability {\n  /**\n   * Content has a negligible chance of being unsafe.\n   */\n  NEGLIGIBLE = 'NEGLIGIBLE',\n  /**\n   * Content has a low chance of being unsafe.\n   */\n  LOW = 'LOW',\n  /**\n   * Content has a medium chance of being unsafe.\n   */\n  MEDIUM = 'MEDIUM',\n  /**\n   * Content has a high chance of being unsafe.\n   */\n  HIGH = 'HIGH'\n}\n\n/**\n * Harm severity levels.\n * @public\n */\nexport enum HarmSeverity {\n  /**\n   * Negligible level of harm severity.\n   */\n  HARM_SEVERITY_NEGLIGIBLE = 'HARM_SEVERITY_NEGLIGIBLE',\n  /**\n   * Low level of harm severity.\n   */\n  HARM_SEVERITY_LOW = 'HARM_SEVERITY_LOW',\n  /**\n   * Medium level of harm severity.\n   */\n  HARM_SEVERITY_MEDIUM = 'HARM_SEVERITY_MEDIUM',\n  /**\n   * High level of harm severity.\n   */\n  HARM_SEVERITY_HIGH = 'HARM_SEVERITY_HIGH',\n  /**\n   * Harm severity is not supported.\n   *\n   * @remarks\n   * The GoogleAI backend does not support `HarmSeverity`, so this value is used as a fallback.\n   */\n  HARM_SEVERITY_UNSUPPORTED = 'HARM_SEVERITY_UNSUPPORTED'\n}\n\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nexport enum BlockReason {\n  /**\n   * Content was blocked by safety settings.\n   */\n  SAFETY = 'SAFETY',\n  /**\n   * Content was blocked, but the reason is uncategorized.\n   */\n  OTHER = 'OTHER',\n  /**\n   * Content was blocked because it contained terms from the terminology blocklist.\n   */\n  BLOCKLIST = 'BLOCKLIST',\n  /**\n   * Content was blocked due to prohibited content.\n   */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT'\n}\n\n/**\n * Reason that a candidate finished.\n * @public\n */\nexport enum FinishReason {\n  /**\n   * Natural stop point of the model or provided stop sequence.\n   */\n  STOP = 'STOP',\n  /**\n   * The maximum number of tokens as specified in the request was reached.\n   */\n  MAX_TOKENS = 'MAX_TOKENS',\n  /**\n   * The candidate content was flagged for safety reasons.\n   */\n  SAFETY = 'SAFETY',\n  /**\n   * The candidate content was flagged for recitation reasons.\n   */\n  RECITATION = 'RECITATION',\n  /**\n   * Unknown reason.\n   */\n  OTHER = 'OTHER',\n  /**\n   * The candidate content contained forbidden terms.\n   */\n  BLOCKLIST = 'BLOCKLIST',\n  /**\n   * The candidate content potentially contained prohibited content.\n   */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n  /**\n   * The candidate content potentially contained Sensitive Personally Identifiable Information (SPII).\n   */\n  SPII = 'SPII',\n  /**\n   * The function call generated by the model was invalid.\n   */\n  MALFORMED_FUNCTION_CALL = 'MALFORMED_FUNCTION_CALL'\n}\n\n/**\n * @public\n */\nexport enum FunctionCallingMode {\n  /**\n   * Default model behavior; model decides to predict either a function call\n   * or a natural language response.\n   */\n  AUTO = 'AUTO',\n  /**\n   * Model is constrained to always predicting a function call only.\n   * If `allowed_function_names` is set, the predicted function call will be\n   * limited to any one of `allowed_function_names`, else the predicted\n   * function call will be any one of the provided `function_declarations`.\n   */\n  ANY = 'ANY',\n  /**\n   * Model will not predict any function call. Model behavior is same as when\n   * not passing any function declarations.\n   */\n  NONE = 'NONE'\n}\n\n/**\n * Content part modality.\n * @public\n */\nexport enum Modality {\n  /**\n   * Unspecified modality.\n   */\n  MODALITY_UNSPECIFIED = 'MODALITY_UNSPECIFIED',\n  /**\n   * Plain text.\n   */\n  TEXT = 'TEXT',\n  /**\n   * Image.\n   */\n  IMAGE = 'IMAGE',\n  /**\n   * Video.\n   */\n  VIDEO = 'VIDEO',\n  /**\n   * Audio.\n   */\n  AUDIO = 'AUDIO',\n  /**\n   * Document (for example, PDF).\n   */\n  DOCUMENT = 'DOCUMENT'\n}\n\n/**\n * Generation modalities to be returned in generation responses.\n *\n * @beta\n */\nexport const ResponseModality = {\n  /**\n   * Text.\n   * @beta\n   */\n  TEXT: 'TEXT',\n  /**\n   * Image.\n   * @beta\n   */\n  IMAGE: 'IMAGE'\n} as const;\n\n/**\n * Generation modalities to be returned in generation responses.\n *\n * @beta\n */\nexport type ResponseModality =\n  (typeof ResponseModality)[keyof typeof ResponseModality];\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by the\n * {@link https://swagger.io/docs/specification/data-models/data-types/ | OpenAPI specification}\n * @public\n */\nexport enum SchemaType {\n  /** String type. */\n  STRING = 'string',\n  /** Number type. */\n  NUMBER = 'number',\n  /** Integer type. */\n  INTEGER = 'integer',\n  /** Boolean type. */\n  BOOLEAN = 'boolean',\n  /** Array type. */\n  ARRAY = 'array',\n  /** Object type. */\n  OBJECT = 'object'\n}\n\n/**\n * Basic {@link Schema} properties shared across several Schema-related\n * types.\n * @public\n */\nexport interface SchemaShared<T> {\n  /** Optional. The format of the property.\n   * When using the Gemini Developer API ({@link GoogleAIBackend}), this must be either `'enum'` or\n   * `'date-time'`, otherwise requests will fail.\n   */\n  format?: string;\n  /** Optional. The description of the property. */\n  description?: string;\n  /**\n   * The title of the property. This helps document the schema's purpose but does not typically\n   * constrain the generated value. It can subtly guide the model by clarifying the intent of a\n   * field.\n   */\n  title?: string;\n  /** Optional. The items of the property. */\n  items?: T;\n  /** The minimum number of items (elements) in a schema of type {@link SchemaType.ARRAY}. */\n  minItems?: number;\n  /** The maximum number of items (elements) in a schema of type {@link SchemaType.ARRAY}. */\n  maxItems?: number;\n  /** Optional. Map of `Schema` objects. */\n  properties?: {\n    [k: string]: T;\n  };\n  /** A hint suggesting the order in which the keys should appear in the generated JSON string. */\n  propertyOrdering?: string[];\n  /** Optional. The enum of the property. */\n  enum?: string[];\n  /** Optional. The example of the property. */\n  example?: unknown;\n  /** Optional. Whether the property is nullable. */\n  nullable?: boolean;\n  /** The minimum value of a numeric type. */\n  minimum?: number;\n  /** The maximum value of a numeric type. */\n  maximum?: number;\n  [key: string]: unknown;\n}\n\n/**\n * Params passed to {@link Schema} static methods to create specific\n * {@link Schema} classes.\n * @public\n */\nexport interface SchemaParams extends SchemaShared<SchemaInterface> {}\n\n/**\n * Final format for {@link Schema} params passed to backend requests.\n * @public\n */\nexport interface SchemaRequest extends SchemaShared<SchemaRequest> {\n  /**\n   * The type of the property. {@link\n   * SchemaType}.\n   */\n  type: SchemaType;\n  /** Optional. Array of required property. */\n  required?: string[];\n}\n\n/**\n * Interface for {@link Schema} class.\n * @public\n */\nexport interface SchemaInterface extends SchemaShared<SchemaInterface> {\n  /**\n   * The type of the property. {@link\n   * SchemaType}.\n   */\n  type: SchemaType;\n}\n\n/**\n * Interface for {@link ObjectSchema} class.\n * @public\n */\nexport interface ObjectSchemaInterface extends SchemaInterface {\n  type: SchemaType.OBJECT;\n  optionalProperties?: string[];\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImagenImageFormat } from '../../requests/imagen-image-format';\n\n/**\n * Parameters for configuring an {@link ImagenModel}.\n *\n * @beta\n */\nexport interface ImagenModelParams {\n  /**\n   * The Imagen model to use for generating images.\n   * For example: `imagen-3.0-generate-002`.\n   *\n   * Only Imagen 3 models (named `imagen-3.0-*`) are supported.\n   *\n   * See {@link https://firebase.google.com/docs/vertex-ai/models | model versions}\n   * for a full list of supported Imagen 3 models.\n   */\n  model: string;\n  /**\n   * Configuration options for generating images with Imagen.\n   */\n  generationConfig?: ImagenGenerationConfig;\n  /**\n   * Safety settings for filtering potentially inappropriate content.\n   */\n  safetySettings?: ImagenSafetySettings;\n}\n\n/**\n * Configuration options for generating images with Imagen.\n *\n * See the {@link http://firebase.google.com/docs/vertex-ai/generate-images-imagen | documentation} for\n * more details.\n *\n * @beta\n */\nexport interface ImagenGenerationConfig {\n  /**\n   * A description of what should be omitted from the generated images.\n   *\n   * Support for negative prompts depends on the Imagen model.\n   *\n   * See the {@link http://firebase.google.com/docs/vertex-ai/model-parameters#imagen | documentation} for more details.\n   *\n   * This is no longer supported in the Gemini Developer API ({@link GoogleAIBackend}) in versions\n   * greater than `imagen-3.0-generate-002`.\n   */\n  negativePrompt?: string;\n  /**\n   * The number of images to generate. The default value is 1.\n   *\n   * The number of sample images that may be generated in each request depends on the model\n   * (typically up to 4); see the <a href=\"http://firebase.google.com/docs/vertex-ai/model-parameters#imagen\">sampleCount</a>\n   * documentation for more details.\n   */\n  numberOfImages?: number;\n  /**\n   * The aspect ratio of the generated images. The default value is square 1:1.\n   * Supported aspect ratios depend on the Imagen model, see {@link ImagenAspectRatio}\n   * for more details.\n   */\n  aspectRatio?: ImagenAspectRatio;\n  /**\n   * The image format of the generated images. The default is PNG.\n   *\n   * See {@link ImagenImageFormat} for more details.\n   */\n  imageFormat?: ImagenImageFormat;\n  /**\n   * Whether to add an invisible watermark to generated images.\n   *\n   * If set to `true`, an invisible SynthID watermark is embedded in generated images to indicate\n   * that they are AI generated. If set to `false`, watermarking will be disabled.\n   *\n   * For Imagen 3 models, the default value is `true`; see the <a href=\"http://firebase.google.com/docs/vertex-ai/model-parameters#imagen\">addWatermark</a>\n   * documentation for more details.\n   *\n   * When using the Gemini Developer API ({@link GoogleAIBackend}), this will default to true,\n   * and cannot be turned off.\n   */\n  addWatermark?: boolean;\n}\n\n/**\n * A filter level controlling how aggressively to filter sensitive content.\n *\n * Text prompts provided as inputs and images (generated or uploaded) through Imagen on Vertex AI\n * are assessed against a list of safety filters, which include 'harmful categories' (for example,\n * `violence`, `sexual`, `derogatory`, and `toxic`). This filter level controls how aggressively to\n * filter out potentially harmful content from responses. See the {@link http://firebase.google.com/docs/vertex-ai/generate-images | documentation }\n * and the {@link https://cloud.google.com/vertex-ai/generative-ai/docs/image/responsible-ai-imagen#safety-filters | Responsible AI and usage guidelines}\n * for more details.\n *\n * @beta\n */\nexport enum ImagenSafetyFilterLevel {\n  /**\n   * The most aggressive filtering level; most strict blocking.\n   */\n  BLOCK_LOW_AND_ABOVE = 'block_low_and_above',\n  /**\n   * Blocks some sensitive prompts and responses.\n   */\n  BLOCK_MEDIUM_AND_ABOVE = 'block_medium_and_above',\n  /**\n   * Blocks few sensitive prompts and responses.\n   */\n  BLOCK_ONLY_HIGH = 'block_only_high',\n  /**\n   * The least aggressive filtering level; blocks very few sensitive prompts and responses.\n   *\n   * Access to this feature is restricted and may require your case to be reviewed and approved by\n   * Cloud support.\n   */\n  BLOCK_NONE = 'block_none'\n}\n\n/**\n * A filter level controlling whether generation of images containing people or faces is allowed.\n *\n * See the <a href=\"http://firebase.google.com/docs/vertex-ai/generate-images\">personGeneration</a>\n * documentation for more details.\n *\n * @beta\n */\nexport enum ImagenPersonFilterLevel {\n  /**\n   * Disallow generation of images containing people or faces; images of people are filtered out.\n   */\n  BLOCK_ALL = 'dont_allow',\n  /**\n   * Allow generation of images containing adults only; images of children are filtered out.\n   *\n   * Generation of images containing people or faces may require your use case to be\n   * reviewed and approved by Cloud support; see the {@link https://cloud.google.com/vertex-ai/generative-ai/docs/image/responsible-ai-imagen#person-face-gen | Responsible AI and usage guidelines}\n   * for more details.\n   */\n  ALLOW_ADULT = 'allow_adult',\n  /**\n   * Allow generation of images containing adults only; images of children are filtered out.\n   *\n   * Generation of images containing people or faces may require your use case to be\n   * reviewed and approved by Cloud support; see the {@link https://cloud.google.com/vertex-ai/generative-ai/docs/image/responsible-ai-imagen#person-face-gen | Responsible AI and usage guidelines}\n   * for more details.\n   */\n  ALLOW_ALL = 'allow_all'\n}\n\n/**\n * Settings for controlling the aggressiveness of filtering out sensitive content.\n *\n * See the {@link http://firebase.google.com/docs/vertex-ai/generate-images | documentation }\n * for more details.\n *\n * @beta\n */\nexport interface ImagenSafetySettings {\n  /**\n   * A filter level controlling how aggressive to filter out sensitive content from generated\n   * images.\n   */\n  safetyFilterLevel?: ImagenSafetyFilterLevel;\n  /**\n   * A filter level controlling whether generation of images containing people or faces is allowed.\n   */\n  personFilterLevel?: ImagenPersonFilterLevel;\n}\n\n/**\n * Aspect ratios for Imagen images.\n *\n * To specify an aspect ratio for generated images, set the `aspectRatio` property in your\n * {@link ImagenGenerationConfig}.\n *\n * See the the {@link http://firebase.google.com/docs/vertex-ai/generate-images | documentation }\n * for more details and examples of the supported aspect ratios.\n *\n * @beta\n */\nexport enum ImagenAspectRatio {\n  /**\n   * Square (1:1) aspect ratio.\n   */\n  SQUARE = '1:1',\n  /**\n   * Landscape (3:4) aspect ratio.\n   */\n  LANDSCAPE_3x4 = '3:4',\n  /**\n   * Portrait (4:3) aspect ratio.\n   */\n  PORTRAIT_4x3 = '4:3',\n  /**\n   * Landscape (16:9) aspect ratio.\n   */\n  LANDSCAPE_16x9 = '16:9',\n  /**\n   * Portrait (9:16) aspect ratio.\n   */\n  PORTRAIT_9x16 = '9:16'\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { Backend } from './backend';\n\nexport * from './types';\n\n/**\n * @deprecated Use the new {@link AI | AI} instead. The Vertex AI in Firebase SDK has been\n * replaced with the Firebase AI SDK to accommodate the evolving set of supported features and\n * services. For migration details, see the {@link https://firebase.google.com/docs/vertex-ai/migrate-to-latest-sdk | migration guide}.\n *\n * An instance of the Firebase AI SDK.\n *\n * @public\n */\nexport type VertexAI = AI;\n\n/**\n * Options when initializing the Firebase AI SDK.\n *\n * @public\n */\nexport interface VertexAIOptions {\n  location?: string;\n}\n\n/**\n * An instance of the Firebase AI SDK.\n *\n * Do not create this instance directly. Instead, use {@link getAI | getAI()}.\n *\n * @public\n */\nexport interface AI {\n  /**\n   * The {@link @firebase/app#FirebaseApp} this {@link AI} instance is associated with.\n   */\n  app: FirebaseApp;\n  /**\n   * A {@link Backend} instance that specifies the configuration for the target backend,\n   * either the Gemini Developer API (using {@link GoogleAIBackend}) or the\n   * Vertex AI Gemini API (using {@link VertexAIBackend}).\n   */\n  backend: Backend;\n  /**\n   * @deprecated use `AI.backend.location` instead.\n   *\n   * The location configured for this AI service instance, relevant for Vertex AI backends.\n   */\n  location: string;\n}\n\n/**\n * An enum-like object containing constants that represent the supported backends\n * for the Firebase AI SDK.\n * This determines which backend service (Vertex AI Gemini API or Gemini Developer API)\n * the SDK will communicate with.\n *\n * These values are assigned to the `backendType` property within the specific backend\n * configuration objects ({@link GoogleAIBackend} or {@link VertexAIBackend}) to identify\n * which service to target.\n *\n * @public\n */\nexport const BackendType = {\n  /**\n   * Identifies the backend service for the Vertex AI Gemini API provided through Google Cloud.\n   * Use this constant when creating a {@link VertexAIBackend} configuration.\n   */\n  VERTEX_AI: 'VERTEX_AI',\n\n  /**\n   * Identifies the backend service for the Gemini Developer API ({@link https://ai.google/ | Google AI}).\n   * Use this constant when creating a {@link GoogleAIBackend} configuration.\n   */\n  GOOGLE_AI: 'GOOGLE_AI'\n} as const; // Using 'as const' makes the string values literal types\n\n/**\n * Type alias representing valid backend types.\n * It can be either `'VERTEX_AI'` or `'GOOGLE_AI'`.\n *\n * @public\n */\nexport type BackendType = (typeof BackendType)[keyof typeof BackendType];\n\n/**\n * Options for initializing the AI service using {@link getAI | getAI()}.\n * This allows specifying which backend to use (Vertex AI Gemini API or Gemini Developer API)\n * and configuring its specific options (like location for Vertex AI).\n *\n * @public\n */\nexport interface AIOptions {\n  /**\n   * The backend configuration to use for the AI service instance.\n   */\n  backend: Backend;\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_LOCATION } from './constants';\nimport { BackendType } from './public-types';\n\n/**\n * Abstract base class representing the configuration for an AI service backend.\n * This class should not be instantiated directly. Use its subclasses; {@link GoogleAIBackend} for\n * the Gemini Developer API (via {@link https://ai.google/ | Google AI}), and\n * {@link VertexAIBackend} for the Vertex AI Gemini API.\n *\n * @public\n */\nexport abstract class Backend {\n  /**\n   * Specifies the backend type.\n   */\n  readonly backendType: BackendType;\n\n  /**\n   * Protected constructor for use by subclasses.\n   * @param type - The backend type.\n   */\n  protected constructor(type: BackendType) {\n    this.backendType = type;\n  }\n}\n\n/**\n * Configuration class for the Gemini Developer API.\n *\n * Use this with {@link AIOptions} when initializing the AI service via\n * {@link getAI | getAI()} to specify the Gemini Developer API as the backend.\n *\n * @public\n */\nexport class GoogleAIBackend extends Backend {\n  /**\n   * Creates a configuration object for the Gemini Developer API backend.\n   */\n  constructor() {\n    super(BackendType.GOOGLE_AI);\n  }\n}\n\n/**\n * Configuration class for the Vertex AI Gemini API.\n *\n * Use this with {@link AIOptions} when initializing the AI service via\n * {@link getAI | getAI()} to specify the Vertex AI Gemini API as the backend.\n *\n * @public\n */\nexport class VertexAIBackend extends Backend {\n  /**\n   * The region identifier.\n   * See {@link https://firebase.google.com/docs/vertex-ai/locations#available-locations | Vertex AI locations}\n   * for a list of supported locations.\n   */\n  readonly location: string;\n\n  /**\n   * Creates a configuration object for the Vertex AI backend.\n   *\n   * @param location - The region identifier, defaulting to `us-central1`;\n   * see {@link https://firebase.google.com/docs/vertex-ai/locations#available-locations | Vertex AI locations}\n   * for a list of supported locations.\n   */\n  constructor(location: string = DEFAULT_LOCATION) {\n    super(BackendType.VERTEX_AI);\n    if (!location) {\n      this.location = DEFAULT_LOCATION;\n    } else {\n      this.location = location;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { AI } from './public-types';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Backend, VertexAIBackend } from './backend';\n\nexport class AIService implements AI, _FirebaseService {\n  auth: FirebaseAuthInternal | null;\n  appCheck: FirebaseAppCheckInternal | null;\n  location: string; // This is here for backwards-compatibility\n\n  constructor(\n    public app: FirebaseApp,\n    public backend: Backend,\n    authProvider?: Provider<FirebaseAuthInternalName>,\n    appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    const appCheck = appCheckProvider?.getImmediate({ optional: true });\n    const auth = authProvider?.getImmediate({ optional: true });\n    this.auth = auth || null;\n    this.appCheck = appCheck || null;\n\n    if (backend instanceof VertexAIBackend) {\n      this.location = backend.location;\n    } else {\n      this.location = '';\n    }\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { AIErrorCode, CustomErrorData } from './types';\nimport { AI_TYPE } from './constants';\n\n/**\n * Error class for the Firebase AI SDK.\n *\n * @public\n */\nexport class AIError extends FirebaseError {\n  /**\n   * Constructs a new instance of the `AIError` class.\n   *\n   * @param code - The error code from {@link AIErrorCode}.\n   * @param message - A human-readable message describing the error.\n   * @param customErrorData - Optional error data.\n   */\n  constructor(\n    readonly code: AIErrorCode,\n    message: string,\n    readonly customErrorData?: CustomErrorData\n  ) {\n    // Match error format used by FirebaseError from ErrorFactory\n    const service = AI_TYPE;\n    const fullCode = `${service}/${code}`;\n    const fullMessage = `${service}: ${message} (${fullCode})`;\n    super(code, fullMessage);\n\n    // FirebaseError initializes a stack trace, but it assumes the error is created from the error\n    // factory. Since we break this assumption, we set the stack trace to be originating from this\n    // constructor.\n    // This is only supported in V8.\n    if (Error.captureStackTrace) {\n      // Allows us to initialize the stack trace without including the constructor itself at the\n      // top level of the stack trace.\n      Error.captureStackTrace(this, AIError);\n    }\n\n    // Allows instanceof AIError in ES5/ES6\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget\n    //                   which we can now use since we no longer target ES5.\n    Object.setPrototypeOf(this, AIError.prototype);\n\n    // Since Error is an interface, we don't inherit toString and so we define it ourselves.\n    this.toString = () => fullMessage;\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AI_TYPE } from './constants';\nimport { AIError } from './errors';\nimport { AIErrorCode } from './types';\nimport { Backend, GoogleAIBackend, VertexAIBackend } from './backend';\n\n/**\n * Encodes a {@link Backend} into a string that will be used to uniquely identify {@link AI}\n * instances by backend type.\n *\n * @internal\n */\nexport function encodeInstanceIdentifier(backend: Backend): string {\n  if (backend instanceof GoogleAIBackend) {\n    return `${AI_TYPE}/googleai`;\n  } else if (backend instanceof VertexAIBackend) {\n    return `${AI_TYPE}/vertexai/${backend.location}`;\n  } else {\n    throw new AIError(\n      AIErrorCode.ERROR,\n      `Invalid backend: ${JSON.stringify(backend.backendType)}`\n    );\n  }\n}\n\n/**\n * Decodes an instance identifier string into a {@link Backend}.\n *\n * @internal\n */\nexport function decodeInstanceIdentifier(instanceIdentifier: string): Backend {\n  const identifierParts = instanceIdentifier.split('/');\n  if (identifierParts[0] !== AI_TYPE) {\n    throw new AIError(\n      AIErrorCode.ERROR,\n      `Invalid instance identifier, unknown prefix '${identifierParts[0]}'`\n    );\n  }\n  const backendType = identifierParts[1];\n  switch (backendType) {\n    case 'vertexai':\n      const location: string | undefined = identifierParts[2];\n      if (!location) {\n        throw new AIError(\n          AIErrorCode.ERROR,\n          `Invalid instance identifier, unknown location '${instanceIdentifier}'`\n        );\n      }\n      return new VertexAIBackend(location);\n    case 'googleai':\n      return new GoogleAIBackend();\n    default:\n      throw new AIError(\n        AIErrorCode.ERROR,\n        `Invalid instance identifier string: '${instanceIdentifier}'`\n      );\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AIError } from '../errors';\nimport { AIErrorCode, AI, BackendType } from '../public-types';\nimport { AIService } from '../service';\nimport { ApiSettings } from '../types/internal';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/**\n * Base class for Firebase AI model APIs.\n *\n * Instances of this class are associated with a specific Firebase AI {@link Backend}\n * and provide methods for interacting with the configured generative model.\n *\n * @public\n */\nexport abstract class AIModel {\n  /**\n   * The fully qualified model resource name to use for generating images\n   * (for example, `publishers/google/models/imagen-3.0-generate-002`).\n   */\n  readonly model: string;\n\n  /**\n   * @internal\n   */\n  protected _apiSettings: ApiSettings;\n\n  /**\n   * Constructs a new instance of the {@link AIModel} class.\n   *\n   * This constructor should only be called from subclasses that provide\n   * a model API.\n   *\n   * @param ai - an {@link AI} instance.\n   * @param modelName - The name of the model being used. It can be in one of the following formats:\n   * - `my-model` (short name, will resolve to `publishers/google/models/my-model`)\n   * - `models/my-model` (will resolve to `publishers/google/models/my-model`)\n   * - `publishers/my-publisher/models/my-model` (fully qualified model name)\n   *\n   * @throws If the `apiKey` or `projectId` fields are missing in your\n   * Firebase config.\n   *\n   * @internal\n   */\n  protected constructor(ai: AI, modelName: string) {\n    if (!ai.app?.options?.apiKey) {\n      throw new AIError(\n        AIErrorCode.NO_API_KEY,\n        `The \"apiKey\" field is empty in the local Firebase config. Firebase AI requires this field to contain a valid API key.`\n      );\n    } else if (!ai.app?.options?.projectId) {\n      throw new AIError(\n        AIErrorCode.NO_PROJECT_ID,\n        `The \"projectId\" field is empty in the local Firebase config. Firebase AI requires this field to contain a valid project ID.`\n      );\n    } else if (!ai.app?.options?.appId) {\n      throw new AIError(\n        AIErrorCode.NO_APP_ID,\n        `The \"appId\" field is empty in the local Firebase config. Firebase AI requires this field to contain a valid app ID.`\n      );\n    } else {\n      this._apiSettings = {\n        apiKey: ai.app.options.apiKey,\n        project: ai.app.options.projectId,\n        appId: ai.app.options.appId,\n        automaticDataCollectionEnabled: ai.app.automaticDataCollectionEnabled,\n        location: ai.location,\n        backend: ai.backend\n      };\n\n      if (_isFirebaseServerApp(ai.app) && ai.app.settings.appCheckToken) {\n        const token = ai.app.settings.appCheckToken;\n        this._apiSettings.getAppCheckToken = () => {\n          return Promise.resolve({ token });\n        };\n      } else if ((ai as AIService).appCheck) {\n        this._apiSettings.getAppCheckToken = () =>\n          (ai as AIService).appCheck!.getToken();\n      }\n\n      if ((ai as AIService).auth) {\n        this._apiSettings.getAuthToken = () =>\n          (ai as AIService).auth!.getToken();\n      }\n\n      this.model = AIModel.normalizeModelName(\n        modelName,\n        this._apiSettings.backend.backendType\n      );\n    }\n  }\n\n  /**\n   * Normalizes the given model name to a fully qualified model resource name.\n   *\n   * @param modelName - The model name to normalize.\n   * @returns The fully qualified model resource name.\n   *\n   * @internal\n   */\n  static normalizeModelName(\n    modelName: string,\n    backendType: BackendType\n  ): string {\n    if (backendType === BackendType.GOOGLE_AI) {\n      return AIModel.normalizeGoogleAIModelName(modelName);\n    } else {\n      return AIModel.normalizeVertexAIModelName(modelName);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private static normalizeGoogleAIModelName(modelName: string): string {\n    return `models/${modelName}`;\n  }\n\n  /**\n   * @internal\n   */\n  private static normalizeVertexAIModelName(modelName: string): string {\n    let model: string;\n    if (modelName.includes('/')) {\n      if (modelName.startsWith('models/')) {\n        // Add 'publishers/google' if the user is only passing in 'models/model-name'.\n        model = `publishers/google/${modelName}`;\n      } else {\n        // Any other custom format (e.g. tuned models) must be passed in correctly.\n        model = modelName;\n      }\n    } else {\n      // If path is not included, assume it's a non-tuned model.\n      model = `publishers/google/models/${modelName}`;\n    }\n\n    return model;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/vertexai');\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorDetails, RequestOptions, AIErrorCode } from '../types';\nimport { AIError } from '../errors';\nimport { ApiSettings } from '../types/internal';\nimport {\n  DEFAULT_API_VERSION,\n  DEFAULT_BASE_URL,\n  DEFAULT_FETCH_TIMEOUT_MS,\n  LANGUAGE_TAG,\n  PACKAGE_VERSION\n} from '../constants';\nimport { logger } from '../logger';\nimport { GoogleAIBackend, VertexAIBackend } from '../backend';\n\nexport enum Task {\n  GENERATE_CONTENT = 'generateContent',\n  STREAM_GENERATE_CONTENT = 'streamGenerateContent',\n  COUNT_TOKENS = 'countTokens',\n  PREDICT = 'predict'\n}\n\nexport class RequestUrl {\n  constructor(\n    public model: string,\n    public task: Task,\n    public apiSettings: ApiSettings,\n    public stream: boolean,\n    public requestOptions?: RequestOptions\n  ) {}\n  toString(): string {\n    const url = new URL(this.baseUrl); // Throws if the URL is invalid\n    url.pathname = `/${this.apiVersion}/${this.modelPath}:${this.task}`;\n    url.search = this.queryParams.toString();\n    return url.toString();\n  }\n\n  private get baseUrl(): string {\n    return this.requestOptions?.baseUrl || DEFAULT_BASE_URL;\n  }\n\n  private get apiVersion(): string {\n    return DEFAULT_API_VERSION; // TODO: allow user-set options if that feature becomes available\n  }\n\n  private get modelPath(): string {\n    if (this.apiSettings.backend instanceof GoogleAIBackend) {\n      return `projects/${this.apiSettings.project}/${this.model}`;\n    } else if (this.apiSettings.backend instanceof VertexAIBackend) {\n      return `projects/${this.apiSettings.project}/locations/${this.apiSettings.backend.location}/${this.model}`;\n    } else {\n      throw new AIError(\n        AIErrorCode.ERROR,\n        `Invalid backend: ${JSON.stringify(this.apiSettings.backend)}`\n      );\n    }\n  }\n\n  private get queryParams(): URLSearchParams {\n    const params = new URLSearchParams();\n    if (this.stream) {\n      params.set('alt', 'sse');\n    }\n\n    return params;\n  }\n}\n\n/**\n * Log language and \"fire/version\" to x-goog-api-client\n */\nfunction getClientHeaders(): string {\n  const loggingTags = [];\n  loggingTags.push(`${LANGUAGE_TAG}/${PACKAGE_VERSION}`);\n  loggingTags.push(`fire/${PACKAGE_VERSION}`);\n  return loggingTags.join(' ');\n}\n\nexport async function getHeaders(url: RequestUrl): Promise<Headers> {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('x-goog-api-client', getClientHeaders());\n  headers.append('x-goog-api-key', url.apiSettings.apiKey);\n  if (url.apiSettings.automaticDataCollectionEnabled) {\n    headers.append('X-Firebase-Appid', url.apiSettings.appId);\n  }\n  if (url.apiSettings.getAppCheckToken) {\n    const appCheckToken = await url.apiSettings.getAppCheckToken();\n    if (appCheckToken) {\n      headers.append('X-Firebase-AppCheck', appCheckToken.token);\n      if (appCheckToken.error) {\n        logger.warn(\n          `Unable to obtain a valid App Check token: ${appCheckToken.error.message}`\n        );\n      }\n    }\n  }\n\n  if (url.apiSettings.getAuthToken) {\n    const authToken = await url.apiSettings.getAuthToken();\n    if (authToken) {\n      headers.append('Authorization', `Firebase ${authToken.accessToken}`);\n    }\n  }\n\n  return headers;\n}\n\nexport async function constructRequest(\n  model: string,\n  task: Task,\n  apiSettings: ApiSettings,\n  stream: boolean,\n  body: string,\n  requestOptions?: RequestOptions\n): Promise<{ url: string; fetchOptions: RequestInit }> {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  return {\n    url: url.toString(),\n    fetchOptions: {\n      method: 'POST',\n      headers: await getHeaders(url),\n      body\n    }\n  };\n}\n\nexport async function makeRequest(\n  model: string,\n  task: Task,\n  apiSettings: ApiSettings,\n  stream: boolean,\n  body: string,\n  requestOptions?: RequestOptions\n): Promise<Response> {\n  const url = new RequestUrl(model, task, apiSettings, stream, requestOptions);\n  let response;\n  let fetchTimeoutId: string | number | NodeJS.Timeout | undefined;\n  try {\n    const request = await constructRequest(\n      model,\n      task,\n      apiSettings,\n      stream,\n      body,\n      requestOptions\n    );\n    // Timeout is 180s by default\n    const timeoutMillis =\n      requestOptions?.timeout != null && requestOptions.timeout >= 0\n        ? requestOptions.timeout\n        : DEFAULT_FETCH_TIMEOUT_MS;\n    const abortController = new AbortController();\n    fetchTimeoutId = setTimeout(() => abortController.abort(), timeoutMillis);\n    request.fetchOptions.signal = abortController.signal;\n\n    response = await fetch(request.url, request.fetchOptions);\n    if (!response.ok) {\n      let message = '';\n      let errorDetails;\n      try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n          message += ` ${JSON.stringify(json.error.details)}`;\n          errorDetails = json.error.details;\n        }\n      } catch (e) {\n        // ignored\n      }\n      if (\n        response.status === 403 &&\n        errorDetails.some(\n          (detail: ErrorDetails) => detail.reason === 'SERVICE_DISABLED'\n        ) &&\n        errorDetails.some((detail: ErrorDetails) =>\n          (\n            detail.links as Array<Record<string, string>>\n          )?.[0]?.description.includes(\n            'Google developers console API activation'\n          )\n        )\n      ) {\n        throw new AIError(\n          AIErrorCode.API_NOT_ENABLED,\n          `The Firebase AI SDK requires the Firebase AI ` +\n            `API ('firebasevertexai.googleapis.com') to be enabled in your ` +\n            `Firebase project. Enable this API by visiting the Firebase Console ` +\n            `at https://console.firebase.google.com/project/${url.apiSettings.project}/genai/ ` +\n            `and clicking \"Get started\". If you enabled this API recently, ` +\n            `wait a few minutes for the action to propagate to our systems and ` +\n            `then retry.`,\n          {\n            status: response.status,\n            statusText: response.statusText,\n            errorDetails\n          }\n        );\n      }\n      throw new AIError(\n        AIErrorCode.FETCH_ERROR,\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${message}`,\n        {\n          status: response.status,\n          statusText: response.statusText,\n          errorDetails\n        }\n      );\n    }\n  } catch (e) {\n    let err = e as Error;\n    if (\n      (e as AIError).code !== AIErrorCode.FETCH_ERROR &&\n      (e as AIError).code !== AIErrorCode.API_NOT_ENABLED &&\n      e instanceof Error\n    ) {\n      err = new AIError(\n        AIErrorCode.ERROR,\n        `Error fetching from ${url.toString()}: ${e.message}`\n      );\n      err.stack = e.stack;\n    }\n\n    throw err;\n  } finally {\n    if (fetchTimeoutId) {\n      clearTimeout(fetchTimeoutId);\n    }\n  }\n  return response;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EnhancedGenerateContentResponse,\n  FinishReason,\n  FunctionCall,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  ImagenGCSImage,\n  ImagenInlineImage,\n  AIErrorCode,\n  InlineDataPart\n} from '../types';\nimport { AIError } from '../errors';\nimport { logger } from '../logger';\nimport { ImagenResponseInternal } from '../types/internal';\n\n/**\n * Creates an EnhancedGenerateContentResponse object that has helper functions and\n * other modifications that improve usability.\n */\nexport function createEnhancedContentResponse(\n  response: GenerateContentResponse\n): EnhancedGenerateContentResponse {\n  /**\n   * The Vertex AI backend omits default values.\n   * This causes the `index` property to be omitted from the first candidate in the\n   * response, since it has index 0, and 0 is a default value.\n   * See: https://github.com/firebase/firebase-js-sdk/issues/8566\n   */\n  if (response.candidates && !response.candidates[0].hasOwnProperty('index')) {\n    response.candidates[0].index = 0;\n  }\n\n  const responseWithHelpers = addHelpers(response);\n  return responseWithHelpers;\n}\n\n/**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */\nexport function addHelpers(\n  response: GenerateContentResponse\n): EnhancedGenerateContentResponse {\n  (response as EnhancedGenerateContentResponse).text = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        logger.warn(\n          `This response had ${response.candidates.length} ` +\n            `candidates. Returning text from the first candidate only. ` +\n            `Access response.candidates directly to use the other candidates.`\n        );\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new AIError(\n          AIErrorCode.RESPONSE_ERROR,\n          `Response error: ${formatBlockErrorMessage(\n            response\n          )}. Response body stored in error.response`,\n          {\n            response\n          }\n        );\n      }\n      return getText(response);\n    } else if (response.promptFeedback) {\n      throw new AIError(\n        AIErrorCode.RESPONSE_ERROR,\n        `Text not available. ${formatBlockErrorMessage(response)}`,\n        {\n          response\n        }\n      );\n    }\n    return '';\n  };\n  (response as EnhancedGenerateContentResponse).inlineDataParts = ():\n    | InlineDataPart[]\n    | undefined => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        logger.warn(\n          `This response had ${response.candidates.length} ` +\n            `candidates. Returning data from the first candidate only. ` +\n            `Access response.candidates directly to use the other candidates.`\n        );\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new AIError(\n          AIErrorCode.RESPONSE_ERROR,\n          `Response error: ${formatBlockErrorMessage(\n            response\n          )}. Response body stored in error.response`,\n          {\n            response\n          }\n        );\n      }\n      return getInlineDataParts(response);\n    } else if (response.promptFeedback) {\n      throw new AIError(\n        AIErrorCode.RESPONSE_ERROR,\n        `Data not available. ${formatBlockErrorMessage(response)}`,\n        {\n          response\n        }\n      );\n    }\n    return undefined;\n  };\n  (response as EnhancedGenerateContentResponse).functionCalls = () => {\n    if (response.candidates && response.candidates.length > 0) {\n      if (response.candidates.length > 1) {\n        logger.warn(\n          `This response had ${response.candidates.length} ` +\n            `candidates. Returning function calls from the first candidate only. ` +\n            `Access response.candidates directly to use the other candidates.`\n        );\n      }\n      if (hadBadFinishReason(response.candidates[0])) {\n        throw new AIError(\n          AIErrorCode.RESPONSE_ERROR,\n          `Response error: ${formatBlockErrorMessage(\n            response\n          )}. Response body stored in error.response`,\n          {\n            response\n          }\n        );\n      }\n      return getFunctionCalls(response);\n    } else if (response.promptFeedback) {\n      throw new AIError(\n        AIErrorCode.RESPONSE_ERROR,\n        `Function call not available. ${formatBlockErrorMessage(response)}`,\n        {\n          response\n        }\n      );\n    }\n    return undefined;\n  };\n  return response as EnhancedGenerateContentResponse;\n}\n\n/**\n * Returns all text found in all parts of first candidate.\n */\nexport function getText(response: GenerateContentResponse): string {\n  const textStrings = [];\n  if (response.candidates?.[0].content?.parts) {\n    for (const part of response.candidates?.[0].content?.parts) {\n      if (part.text) {\n        textStrings.push(part.text);\n      }\n    }\n  }\n  if (textStrings.length > 0) {\n    return textStrings.join('');\n  } else {\n    return '';\n  }\n}\n\n/**\n * Returns {@link FunctionCall}s associated with first candidate.\n */\nexport function getFunctionCalls(\n  response: GenerateContentResponse\n): FunctionCall[] | undefined {\n  const functionCalls: FunctionCall[] = [];\n  if (response.candidates?.[0].content?.parts) {\n    for (const part of response.candidates?.[0].content?.parts) {\n      if (part.functionCall) {\n        functionCalls.push(part.functionCall);\n      }\n    }\n  }\n  if (functionCalls.length > 0) {\n    return functionCalls;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Returns {@link InlineDataPart}s in the first candidate if present.\n *\n * @internal\n */\nexport function getInlineDataParts(\n  response: GenerateContentResponse\n): InlineDataPart[] | undefined {\n  const data: InlineDataPart[] = [];\n\n  if (response.candidates?.[0].content?.parts) {\n    for (const part of response.candidates?.[0].content?.parts) {\n      if (part.inlineData) {\n        data.push(part);\n      }\n    }\n  }\n\n  if (data.length > 0) {\n    return data;\n  } else {\n    return undefined;\n  }\n}\n\nconst badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];\n\nfunction hadBadFinishReason(candidate: GenerateContentCandidate): boolean {\n  return (\n    !!candidate.finishReason &&\n    badFinishReasons.includes(candidate.finishReason)\n  );\n}\n\nexport function formatBlockErrorMessage(\n  response: GenerateContentResponse\n): string {\n  let message = '';\n  if (\n    (!response.candidates || response.candidates.length === 0) &&\n    response.promptFeedback\n  ) {\n    message += 'Response was blocked';\n    if (response.promptFeedback?.blockReason) {\n      message += ` due to ${response.promptFeedback.blockReason}`;\n    }\n    if (response.promptFeedback?.blockReasonMessage) {\n      message += `: ${response.promptFeedback.blockReasonMessage}`;\n    }\n  } else if (response.candidates?.[0]) {\n    const firstCandidate = response.candidates[0];\n    if (hadBadFinishReason(firstCandidate)) {\n      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n      if (firstCandidate.finishMessage) {\n        message += `: ${firstCandidate.finishMessage}`;\n      }\n    }\n  }\n  return message;\n}\n\n/**\n * Convert a generic successful fetch response body to an Imagen response object\n * that can be returned to the user. This converts the REST APIs response format to our\n * APIs representation of a response.\n *\n * @internal\n */\nexport async function handlePredictResponse<\n  T extends ImagenInlineImage | ImagenGCSImage\n>(response: Response): Promise<{ images: T[]; filteredReason?: string }> {\n  const responseJson: ImagenResponseInternal = await response.json();\n\n  const images: T[] = [];\n  let filteredReason: string | undefined = undefined;\n\n  // The backend should always send a non-empty array of predictions if the response was successful.\n  if (!responseJson.predictions || responseJson.predictions?.length === 0) {\n    throw new AIError(\n      AIErrorCode.RESPONSE_ERROR,\n      'No predictions or filtered reason received from Vertex AI. Please report this issue with the full error details at https://github.com/firebase/firebase-js-sdk/issues.'\n    );\n  }\n\n  for (const prediction of responseJson.predictions) {\n    if (prediction.raiFilteredReason) {\n      filteredReason = prediction.raiFilteredReason;\n    } else if (prediction.mimeType && prediction.bytesBase64Encoded) {\n      images.push({\n        mimeType: prediction.mimeType,\n        bytesBase64Encoded: prediction.bytesBase64Encoded\n      } as T);\n    } else if (prediction.mimeType && prediction.gcsUri) {\n      images.push({\n        mimeType: prediction.mimeType,\n        gcsURI: prediction.gcsUri\n      } as T);\n    } else {\n      throw new AIError(\n        AIErrorCode.RESPONSE_ERROR,\n        `Predictions array in response has missing properties. Response: ${JSON.stringify(\n          responseJson\n        )}`\n      );\n    }\n  }\n\n  return { images, filteredReason };\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AIError } from './errors';\nimport { logger } from './logger';\nimport {\n  CitationMetadata,\n  CountTokensRequest,\n  GenerateContentCandidate,\n  GenerateContentRequest,\n  GenerateContentResponse,\n  HarmSeverity,\n  InlineDataPart,\n  PromptFeedback,\n  SafetyRating,\n  AIErrorCode\n} from './types';\nimport {\n  GoogleAIGenerateContentResponse,\n  GoogleAIGenerateContentCandidate,\n  GoogleAICountTokensRequest\n} from './types/googleai';\n\n/**\n * This SDK supports both the Vertex AI Gemini API and the Gemini Developer API (using Google AI).\n * The public API prioritizes the format used by the Vertex AI Gemini API.\n * We avoid having two sets of types by translating requests and responses between the two API formats.\n * This translation allows developers to switch between the Vertex AI Gemini API and the Gemini Developer API\n * with minimal code changes.\n *\n * In here are functions that map requests and responses between the two API formats.\n * Requests in the Vertex AI format are mapped to the Google AI format before being sent.\n * Responses from the Google AI backend are mapped back to the Vertex AI format before being returned to the user.\n */\n\n/**\n * Maps a Vertex AI {@link GenerateContentRequest} to a format that can be sent to Google AI.\n *\n * @param generateContentRequest The {@link GenerateContentRequest} to map.\n * @returns A {@link GenerateContentResponse} that conforms to the Google AI format.\n *\n * @throws If the request contains properties that are unsupported by Google AI.\n *\n * @internal\n */\nexport function mapGenerateContentRequest(\n  generateContentRequest: GenerateContentRequest\n): GenerateContentRequest {\n  generateContentRequest.safetySettings?.forEach(safetySetting => {\n    if (safetySetting.method) {\n      throw new AIError(\n        AIErrorCode.UNSUPPORTED,\n        'SafetySetting.method is not supported in the the Gemini Developer API. Please remove this property.'\n      );\n    }\n  });\n\n  if (generateContentRequest.generationConfig?.topK) {\n    const roundedTopK = Math.round(\n      generateContentRequest.generationConfig.topK\n    );\n\n    if (roundedTopK !== generateContentRequest.generationConfig.topK) {\n      logger.warn(\n        'topK in GenerationConfig has been rounded to the nearest integer to match the format for requests to the Gemini Developer API.'\n      );\n      generateContentRequest.generationConfig.topK = roundedTopK;\n    }\n  }\n\n  return generateContentRequest;\n}\n\n/**\n * Maps a {@link GenerateContentResponse} from Google AI to the format of the\n * {@link GenerateContentResponse} that we get from VertexAI that is exposed in the public API.\n *\n * @param googleAIResponse The {@link GenerateContentResponse} from Google AI.\n * @returns A {@link GenerateContentResponse} that conforms to the public API's format.\n *\n * @internal\n */\nexport function mapGenerateContentResponse(\n  googleAIResponse: GoogleAIGenerateContentResponse\n): GenerateContentResponse {\n  const generateContentResponse = {\n    candidates: googleAIResponse.candidates\n      ? mapGenerateContentCandidates(googleAIResponse.candidates)\n      : undefined,\n    prompt: googleAIResponse.promptFeedback\n      ? mapPromptFeedback(googleAIResponse.promptFeedback)\n      : undefined,\n    usageMetadata: googleAIResponse.usageMetadata\n  };\n\n  return generateContentResponse;\n}\n\n/**\n * Maps a Vertex AI {@link CountTokensRequest} to a format that can be sent to Google AI.\n *\n * @param countTokensRequest The {@link CountTokensRequest} to map.\n * @param model The model to count tokens with.\n * @returns A {@link CountTokensRequest} that conforms to the Google AI format.\n *\n * @internal\n */\nexport function mapCountTokensRequest(\n  countTokensRequest: CountTokensRequest,\n  model: string\n): GoogleAICountTokensRequest {\n  const mappedCountTokensRequest: GoogleAICountTokensRequest = {\n    generateContentRequest: {\n      model,\n      ...countTokensRequest\n    }\n  };\n\n  return mappedCountTokensRequest;\n}\n\n/**\n * Maps a Google AI {@link GoogleAIGenerateContentCandidate} to a format that conforms\n * to the Vertex AI API format.\n *\n * @param candidates The {@link GoogleAIGenerateContentCandidate} to map.\n * @returns A {@link GenerateContentCandidate} that conforms to the Vertex AI format.\n *\n * @throws If any {@link Part} in the candidates has a `videoMetadata` property.\n *\n * @internal\n */\nexport function mapGenerateContentCandidates(\n  candidates: GoogleAIGenerateContentCandidate[]\n): GenerateContentCandidate[] {\n  const mappedCandidates: GenerateContentCandidate[] = [];\n  let mappedSafetyRatings: SafetyRating[];\n  if (mappedCandidates) {\n    candidates.forEach(candidate => {\n      // Map citationSources to citations.\n      let citationMetadata: CitationMetadata | undefined;\n      if (candidate.citationMetadata) {\n        citationMetadata = {\n          citations: candidate.citationMetadata.citationSources\n        };\n      }\n\n      // Assign missing candidate SafetyRatings properties to their defaults if undefined.\n      if (candidate.safetyRatings) {\n        mappedSafetyRatings = candidate.safetyRatings.map(safetyRating => {\n          return {\n            ...safetyRating,\n            severity:\n              safetyRating.severity ?? HarmSeverity.HARM_SEVERITY_UNSUPPORTED,\n            probabilityScore: safetyRating.probabilityScore ?? 0,\n            severityScore: safetyRating.severityScore ?? 0\n          };\n        });\n      }\n\n      // videoMetadata is not supported.\n      // Throw early since developers may send a long video as input and only expect to pay\n      // for inference on a small portion of the video.\n      if (\n        candidate.content?.parts.some(\n          part => (part as InlineDataPart)?.videoMetadata\n        )\n      ) {\n        throw new AIError(\n          AIErrorCode.UNSUPPORTED,\n          'Part.videoMetadata is not supported in the Gemini Developer API. Please remove this property.'\n        );\n      }\n\n      const mappedCandidate = {\n        index: candidate.index,\n        content: candidate.content,\n        finishReason: candidate.finishReason,\n        finishMessage: candidate.finishMessage,\n        safetyRatings: mappedSafetyRatings,\n        citationMetadata,\n        groundingMetadata: candidate.groundingMetadata\n      };\n      mappedCandidates.push(mappedCandidate);\n    });\n  }\n\n  return mappedCandidates;\n}\n\nexport function mapPromptFeedback(\n  promptFeedback: PromptFeedback\n): PromptFeedback {\n  // Assign missing SafetyRating properties to their defaults if undefined.\n  const mappedSafetyRatings: SafetyRating[] = [];\n  promptFeedback.safetyRatings.forEach(safetyRating => {\n    mappedSafetyRatings.push({\n      category: safetyRating.category,\n      probability: safetyRating.probability,\n      severity: safetyRating.severity ?? HarmSeverity.HARM_SEVERITY_UNSUPPORTED,\n      probabilityScore: safetyRating.probabilityScore ?? 0,\n      severityScore: safetyRating.severityScore ?? 0,\n      blocked: safetyRating.blocked\n    });\n  });\n\n  const mappedPromptFeedback: PromptFeedback = {\n    blockReason: promptFeedback.blockReason,\n    safetyRatings: mappedSafetyRatings,\n    blockReasonMessage: promptFeedback.blockReasonMessage\n  };\n  return mappedPromptFeedback;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EnhancedGenerateContentResponse,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  GenerateContentStreamResult,\n  Part,\n  AIErrorCode\n} from '../types';\nimport { AIError } from '../errors';\nimport { createEnhancedContentResponse } from './response-helpers';\nimport * as GoogleAIMapper from '../googleai-mappers';\nimport { GoogleAIGenerateContentResponse } from '../types/googleai';\nimport { ApiSettings } from '../types/internal';\nimport { BackendType } from '../public-types';\n\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */\nexport function processStream(\n  response: Response,\n  apiSettings: ApiSettings\n): GenerateContentStreamResult {\n  const inputStream = response.body!.pipeThrough(\n    new TextDecoderStream('utf8', { fatal: true })\n  );\n  const responseStream =\n    getResponseStream<GenerateContentResponse>(inputStream);\n  const [stream1, stream2] = responseStream.tee();\n  return {\n    stream: generateResponseSequence(stream1, apiSettings),\n    response: getResponsePromise(stream2, apiSettings)\n  };\n}\n\nasync function getResponsePromise(\n  stream: ReadableStream<GenerateContentResponse>,\n  apiSettings: ApiSettings\n): Promise<EnhancedGenerateContentResponse> {\n  const allResponses: GenerateContentResponse[] = [];\n  const reader = stream.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      let generateContentResponse = aggregateResponses(allResponses);\n      if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n        generateContentResponse = GoogleAIMapper.mapGenerateContentResponse(\n          generateContentResponse as GoogleAIGenerateContentResponse\n        );\n      }\n      return createEnhancedContentResponse(generateContentResponse);\n    }\n\n    allResponses.push(value);\n  }\n}\n\nasync function* generateResponseSequence(\n  stream: ReadableStream<GenerateContentResponse>,\n  apiSettings: ApiSettings\n): AsyncGenerator<EnhancedGenerateContentResponse> {\n  const reader = stream.getReader();\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) {\n      break;\n    }\n\n    let enhancedResponse: EnhancedGenerateContentResponse;\n    if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n      enhancedResponse = createEnhancedContentResponse(\n        GoogleAIMapper.mapGenerateContentResponse(\n          value as GoogleAIGenerateContentResponse\n        )\n      );\n    } else {\n      enhancedResponse = createEnhancedContentResponse(value);\n    }\n\n    yield enhancedResponse;\n  }\n}\n\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */\nexport function getResponseStream<T>(\n  inputStream: ReadableStream<string>\n): ReadableStream<T> {\n  const reader = inputStream.getReader();\n  const stream = new ReadableStream<T>({\n    start(controller) {\n      let currentText = '';\n      return pump();\n      function pump(): Promise<(() => Promise<void>) | undefined> {\n        return reader.read().then(({ value, done }) => {\n          if (done) {\n            if (currentText.trim()) {\n              controller.error(\n                new AIError(AIErrorCode.PARSE_FAILED, 'Failed to parse stream')\n              );\n              return;\n            }\n            controller.close();\n            return;\n          }\n\n          currentText += value;\n          let match = currentText.match(responseLineRE);\n          let parsedResponse: T;\n          while (match) {\n            try {\n              parsedResponse = JSON.parse(match[1]);\n            } catch (e) {\n              controller.error(\n                new AIError(\n                  AIErrorCode.PARSE_FAILED,\n                  `Error parsing JSON response: \"${match[1]}`\n                )\n              );\n              return;\n            }\n            controller.enqueue(parsedResponse);\n            currentText = currentText.substring(match[0].length);\n            match = currentText.match(responseLineRE);\n          }\n          return pump();\n        });\n      }\n    }\n  });\n  return stream;\n}\n\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */\nexport function aggregateResponses(\n  responses: GenerateContentResponse[]\n): GenerateContentResponse {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse: GenerateContentResponse = {\n    promptFeedback: lastResponse?.promptFeedback\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      for (const candidate of response.candidates) {\n        // Index will be undefined if it's the first index (0), so we should use 0 if it's undefined.\n        // See: https://github.com/firebase/firebase-js-sdk/issues/8566\n        const i = candidate.index || 0;\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[i]) {\n          aggregatedResponse.candidates[i] = {\n            index: candidate.index\n          } as GenerateContentCandidate;\n        }\n        // Keep overwriting, the last one will be final\n        aggregatedResponse.candidates[i].citationMetadata =\n          candidate.citationMetadata;\n        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n        aggregatedResponse.candidates[i].finishMessage =\n          candidate.finishMessage;\n        aggregatedResponse.candidates[i].safetyRatings =\n          candidate.safetyRatings;\n\n        /**\n         * Candidates should always have content and parts, but this handles\n         * possible malformed responses.\n         */\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[i].content) {\n            aggregatedResponse.candidates[i].content = {\n              role: candidate.content.role || 'user',\n              parts: []\n            };\n          }\n          const newPart: Partial<Part> = {};\n          for (const part of candidate.content.parts) {\n            if (part.text !== undefined) {\n              // The backend can send empty text parts. If these are sent back\n              // (e.g. in chat history), the backend will respond with an error.\n              // To prevent this, ignore empty text parts.\n              if (part.text === '') {\n                continue;\n              }\n              newPart.text = part.text;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (Object.keys(newPart).length === 0) {\n              throw new AIError(\n                AIErrorCode.INVALID_CONTENT,\n                'Part should have at least one property, but there are none. This is likely caused ' +\n                  'by a malformed response from the backend.'\n              );\n            }\n            aggregatedResponse.candidates[i].content.parts.push(\n              newPart as Part\n            );\n          }\n        }\n      }\n    }\n  }\n  return aggregatedResponse;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateContentRequest,\n  GenerateContentResponse,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  RequestOptions\n} from '../types';\nimport { Task, makeRequest } from '../requests/request';\nimport { createEnhancedContentResponse } from '../requests/response-helpers';\nimport { processStream } from '../requests/stream-reader';\nimport { ApiSettings } from '../types/internal';\nimport * as GoogleAIMapper from '../googleai-mappers';\nimport { BackendType } from '../public-types';\n\nexport async function generateContentStream(\n  apiSettings: ApiSettings,\n  model: string,\n  params: GenerateContentRequest,\n  requestOptions?: RequestOptions\n): Promise<GenerateContentStreamResult> {\n  if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n    params = GoogleAIMapper.mapGenerateContentRequest(params);\n  }\n  const response = await makeRequest(\n    model,\n    Task.STREAM_GENERATE_CONTENT,\n    apiSettings,\n    /* stream */ true,\n    JSON.stringify(params),\n    requestOptions\n  );\n  return processStream(response, apiSettings); // TODO: Map streaming responses\n}\n\nexport async function generateContent(\n  apiSettings: ApiSettings,\n  model: string,\n  params: GenerateContentRequest,\n  requestOptions?: RequestOptions\n): Promise<GenerateContentResult> {\n  if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n    params = GoogleAIMapper.mapGenerateContentRequest(params);\n  }\n  const response = await makeRequest(\n    model,\n    Task.GENERATE_CONTENT,\n    apiSettings,\n    /* stream */ false,\n    JSON.stringify(params),\n    requestOptions\n  );\n  const generateContentResponse = await processGenerateContentResponse(\n    response,\n    apiSettings\n  );\n  const enhancedResponse = createEnhancedContentResponse(\n    generateContentResponse\n  );\n  return {\n    response: enhancedResponse\n  };\n}\n\nasync function processGenerateContentResponse(\n  response: Response,\n  apiSettings: ApiSettings\n): Promise<GenerateContentResponse> {\n  const responseJson = await response.json();\n  if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n    return GoogleAIMapper.mapGenerateContentResponse(responseJson);\n  } else {\n    return responseJson;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Content, GenerateContentRequest, Part, AIErrorCode } from '../types';\nimport { AIError } from '../errors';\nimport { ImagenGenerationParams, PredictRequestBody } from '../types/internal';\n\nexport function formatSystemInstruction(\n  input?: string | Part | Content\n): Content | undefined {\n  // null or undefined\n  if (input == null) {\n    return undefined;\n  } else if (typeof input === 'string') {\n    return { role: 'system', parts: [{ text: input }] } as Content;\n  } else if ((input as Part).text) {\n    return { role: 'system', parts: [input as Part] };\n  } else if ((input as Content).parts) {\n    if (!(input as Content).role) {\n      return { role: 'system', parts: (input as Content).parts };\n    } else {\n      return input as Content;\n    }\n  }\n}\n\nexport function formatNewContent(\n  request: string | Array<string | Part>\n): Content {\n  let newParts: Part[] = [];\n  if (typeof request === 'string') {\n    newParts = [{ text: request }];\n  } else {\n    for (const partOrString of request) {\n      if (typeof partOrString === 'string') {\n        newParts.push({ text: partOrString });\n      } else {\n        newParts.push(partOrString);\n      }\n    }\n  }\n  return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(\n  parts: Part[]\n): Content {\n  const userContent: Content = { role: 'user', parts: [] };\n  const functionContent: Content = { role: 'function', parts: [] };\n  let hasUserContent = false;\n  let hasFunctionContent = false;\n  for (const part of parts) {\n    if ('functionResponse' in part) {\n      functionContent.parts.push(part);\n      hasFunctionContent = true;\n    } else {\n      userContent.parts.push(part);\n      hasUserContent = true;\n    }\n  }\n\n  if (hasUserContent && hasFunctionContent) {\n    throw new AIError(\n      AIErrorCode.INVALID_CONTENT,\n      'Within a single message, FunctionResponse cannot be mixed with other type of Part in the request for sending chat message.'\n    );\n  }\n\n  if (!hasUserContent && !hasFunctionContent) {\n    throw new AIError(\n      AIErrorCode.INVALID_CONTENT,\n      'No Content is provided for sending chat message.'\n    );\n  }\n\n  if (hasUserContent) {\n    return userContent;\n  }\n\n  return functionContent;\n}\n\nexport function formatGenerateContentInput(\n  params: GenerateContentRequest | string | Array<string | Part>\n): GenerateContentRequest {\n  let formattedRequest: GenerateContentRequest;\n  if ((params as GenerateContentRequest).contents) {\n    formattedRequest = params as GenerateContentRequest;\n  } else {\n    // Array or string\n    const content = formatNewContent(params as string | Array<string | Part>);\n    formattedRequest = { contents: [content] };\n  }\n  if ((params as GenerateContentRequest).systemInstruction) {\n    formattedRequest.systemInstruction = formatSystemInstruction(\n      (params as GenerateContentRequest).systemInstruction\n    );\n  }\n  return formattedRequest;\n}\n\n/**\n * Convert the user-defined parameters in {@link ImagenGenerationParams} to the format\n * that is expected from the REST API.\n *\n * @internal\n */\nexport function createPredictRequestBody(\n  prompt: string,\n  {\n    gcsURI,\n    imageFormat,\n    addWatermark,\n    numberOfImages = 1,\n    negativePrompt,\n    aspectRatio,\n    safetyFilterLevel,\n    personFilterLevel\n  }: ImagenGenerationParams\n): PredictRequestBody {\n  // Properties that are undefined will be omitted from the JSON string that is sent in the request.\n  const body: PredictRequestBody = {\n    instances: [\n      {\n        prompt\n      }\n    ],\n    parameters: {\n      storageUri: gcsURI,\n      negativePrompt,\n      sampleCount: numberOfImages,\n      aspectRatio,\n      outputOptions: imageFormat,\n      addWatermark,\n      safetyFilterLevel,\n      personGeneration: personFilterLevel,\n      includeRaiReason: true\n    }\n  };\n  return body;\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Content, POSSIBLE_ROLES, Part, Role, AIErrorCode } from '../types';\nimport { AIError } from '../errors';\n\n// https://ai.google.dev/api/rest/v1beta/Content#part\n\nconst VALID_PART_FIELDS: Array<keyof Part> = [\n  'text',\n  'inlineData',\n  'functionCall',\n  'functionResponse'\n];\n\nconst VALID_PARTS_PER_ROLE: { [key in Role]: Array<keyof Part> } = {\n  user: ['text', 'inlineData'],\n  function: ['functionResponse'],\n  model: ['text', 'functionCall'],\n  // System instructions shouldn't be in history anyway.\n  system: ['text']\n};\n\nconst VALID_PREVIOUS_CONTENT_ROLES: { [key in Role]: Role[] } = {\n  user: ['model'],\n  function: ['model'],\n  model: ['user', 'function'],\n  // System instructions shouldn't be in history.\n  system: []\n};\n\nexport function validateChatHistory(history: Content[]): void {\n  let prevContent: Content | null = null;\n  for (const currContent of history) {\n    const { role, parts } = currContent;\n    if (!prevContent && role !== 'user') {\n      throw new AIError(\n        AIErrorCode.INVALID_CONTENT,\n        `First Content should be with role 'user', got ${role}`\n      );\n    }\n    if (!POSSIBLE_ROLES.includes(role)) {\n      throw new AIError(\n        AIErrorCode.INVALID_CONTENT,\n        `Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(\n          POSSIBLE_ROLES\n        )}`\n      );\n    }\n\n    if (!Array.isArray(parts)) {\n      throw new AIError(\n        AIErrorCode.INVALID_CONTENT,\n        `Content should have 'parts' but property with an array of Parts`\n      );\n    }\n\n    if (parts.length === 0) {\n      throw new AIError(\n        AIErrorCode.INVALID_CONTENT,\n        `Each Content should have at least one part`\n      );\n    }\n\n    const countFields: Record<keyof Part, number> = {\n      text: 0,\n      inlineData: 0,\n      functionCall: 0,\n      functionResponse: 0\n    };\n\n    for (const part of parts) {\n      for (const key of VALID_PART_FIELDS) {\n        if (key in part) {\n          countFields[key] += 1;\n        }\n      }\n    }\n    const validParts = VALID_PARTS_PER_ROLE[role];\n    for (const key of VALID_PART_FIELDS) {\n      if (!validParts.includes(key) && countFields[key] > 0) {\n        throw new AIError(\n          AIErrorCode.INVALID_CONTENT,\n          `Content with role '${role}' can't contain '${key}' part`\n        );\n      }\n    }\n\n    if (prevContent) {\n      const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];\n      if (!validPreviousContentRoles.includes(prevContent.role)) {\n        throw new AIError(\n          AIErrorCode.INVALID_CONTENT,\n          `Content with role '${role}' can't follow '${\n            prevContent.role\n          }'. Valid previous roles: ${JSON.stringify(\n            VALID_PREVIOUS_CONTENT_ROLES\n          )}`\n        );\n      }\n    }\n    prevContent = currContent;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Content,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  Part,\n  RequestOptions,\n  StartChatParams\n} from '../types';\nimport { formatNewContent } from '../requests/request-helpers';\nimport { formatBlockErrorMessage } from '../requests/response-helpers';\nimport { validateChatHistory } from './chat-session-helpers';\nimport { generateContent, generateContentStream } from './generate-content';\nimport { ApiSettings } from '../types/internal';\nimport { logger } from '../logger';\n\n/**\n * Do not log a message for this error.\n */\nconst SILENT_ERROR = 'SILENT_ERROR';\n\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */\nexport class ChatSession {\n  private _apiSettings: ApiSettings;\n  private _history: Content[] = [];\n  private _sendPromise: Promise<void> = Promise.resolve();\n\n  constructor(\n    apiSettings: ApiSettings,\n    public model: string,\n    public params?: StartChatParams,\n    public requestOptions?: RequestOptions\n  ) {\n    this._apiSettings = apiSettings;\n    if (params?.history) {\n      validateChatHistory(params.history);\n      this._history = params.history;\n    }\n  }\n\n  /**\n   * Gets the chat history so far. Blocked prompts are not added to history.\n   * Neither blocked candidates nor the prompts that generated them are added\n   * to history.\n   */\n  async getHistory(): Promise<Content[]> {\n    await this._sendPromise;\n    return this._history;\n  }\n\n  /**\n   * Sends a chat message and receives a non-streaming\n   * {@link GenerateContentResult}\n   */\n  async sendMessage(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest: GenerateContentRequest = {\n      safetySettings: this.params?.safetySettings,\n      generationConfig: this.params?.generationConfig,\n      tools: this.params?.tools,\n      toolConfig: this.params?.toolConfig,\n      systemInstruction: this.params?.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    let finalResult = {} as GenerateContentResult;\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise\n      .then(() =>\n        generateContent(\n          this._apiSettings,\n          this.model,\n          generateContentRequest,\n          this.requestOptions\n        )\n      )\n      .then(result => {\n        if (\n          result.response.candidates &&\n          result.response.candidates.length > 0\n        ) {\n          this._history.push(newContent);\n          const responseContent: Content = {\n            parts: result.response.candidates?.[0].content.parts || [],\n            // Response seems to come back without a role set.\n            role: result.response.candidates?.[0].content.role || 'model'\n          };\n          this._history.push(responseContent);\n        } else {\n          const blockErrorMessage = formatBlockErrorMessage(result.response);\n          if (blockErrorMessage) {\n            logger.warn(\n              `sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`\n            );\n          }\n        }\n        finalResult = result;\n      });\n    await this._sendPromise;\n    return finalResult;\n  }\n\n  /**\n   * Sends a chat message and receives the response as a\n   * {@link GenerateContentStreamResult} containing an iterable stream\n   * and a response promise.\n   */\n  async sendMessageStream(\n    request: string | Array<string | Part>\n  ): Promise<GenerateContentStreamResult> {\n    await this._sendPromise;\n    const newContent = formatNewContent(request);\n    const generateContentRequest: GenerateContentRequest = {\n      safetySettings: this.params?.safetySettings,\n      generationConfig: this.params?.generationConfig,\n      tools: this.params?.tools,\n      toolConfig: this.params?.toolConfig,\n      systemInstruction: this.params?.systemInstruction,\n      contents: [...this._history, newContent]\n    };\n    const streamPromise = generateContentStream(\n      this._apiSettings,\n      this.model,\n      generateContentRequest,\n      this.requestOptions\n    );\n\n    // Add onto the chain.\n    this._sendPromise = this._sendPromise\n      .then(() => streamPromise)\n      // This must be handled to avoid unhandled rejection, but jump\n      // to the final catch block with a label to not log this error.\n      .catch(_ignored => {\n        throw new Error(SILENT_ERROR);\n      })\n      .then(streamResult => streamResult.response)\n      .then(response => {\n        if (response.candidates && response.candidates.length > 0) {\n          this._history.push(newContent);\n          const responseContent = { ...response.candidates[0].content };\n          // Response seems to come back without a role set.\n          if (!responseContent.role) {\n            responseContent.role = 'model';\n          }\n          this._history.push(responseContent);\n        } else {\n          const blockErrorMessage = formatBlockErrorMessage(response);\n          if (blockErrorMessage) {\n            logger.warn(\n              `sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`\n            );\n          }\n        }\n      })\n      .catch(e => {\n        // Errors in streamPromise are already catchable by the user as\n        // streamPromise is returned.\n        // Avoid duplicating the error message in logs.\n        if (e.message !== SILENT_ERROR) {\n          // Users do not have access to _sendPromise to catch errors\n          // downstream from streamPromise, so they should not throw.\n          logger.error(e);\n        }\n      });\n    return streamPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CountTokensRequest,\n  CountTokensResponse,\n  RequestOptions\n} from '../types';\nimport { Task, makeRequest } from '../requests/request';\nimport { ApiSettings } from '../types/internal';\nimport * as GoogleAIMapper from '../googleai-mappers';\nimport { BackendType } from '../public-types';\n\nexport async function countTokens(\n  apiSettings: ApiSettings,\n  model: string,\n  params: CountTokensRequest,\n  requestOptions?: RequestOptions\n): Promise<CountTokensResponse> {\n  let body: string = '';\n  if (apiSettings.backend.backendType === BackendType.GOOGLE_AI) {\n    const mappedParams = GoogleAIMapper.mapCountTokensRequest(params, model);\n    body = JSON.stringify(mappedParams);\n  } else {\n    body = JSON.stringify(params);\n  }\n  const response = await makeRequest(\n    model,\n    Task.COUNT_TOKENS,\n    apiSettings,\n    false,\n    body,\n    requestOptions\n  );\n  return response.json();\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateContent,\n  generateContentStream\n} from '../methods/generate-content';\nimport {\n  Content,\n  CountTokensRequest,\n  CountTokensResponse,\n  GenerateContentRequest,\n  GenerateContentResult,\n  GenerateContentStreamResult,\n  GenerationConfig,\n  ModelParams,\n  Part,\n  RequestOptions,\n  SafetySetting,\n  StartChatParams,\n  Tool,\n  ToolConfig\n} from '../types';\nimport { ChatSession } from '../methods/chat-session';\nimport { countTokens } from '../methods/count-tokens';\nimport {\n  formatGenerateContentInput,\n  formatSystemInstruction\n} from '../requests/request-helpers';\nimport { AI } from '../public-types';\nimport { AIModel } from './ai-model';\n\n/**\n * Class for generative model APIs.\n * @public\n */\nexport class GenerativeModel extends AIModel {\n  generationConfig: GenerationConfig;\n  safetySettings: SafetySetting[];\n  requestOptions?: RequestOptions;\n  tools?: Tool[];\n  toolConfig?: ToolConfig;\n  systemInstruction?: Content;\n\n  constructor(\n    ai: AI,\n    modelParams: ModelParams,\n    requestOptions?: RequestOptions\n  ) {\n    super(ai, modelParams.model);\n    this.generationConfig = modelParams.generationConfig || {};\n    this.safetySettings = modelParams.safetySettings || [];\n    this.tools = modelParams.tools;\n    this.toolConfig = modelParams.toolConfig;\n    this.systemInstruction = formatSystemInstruction(\n      modelParams.systemInstruction\n    );\n    this.requestOptions = requestOptions || {};\n  }\n\n  /**\n   * Makes a single non-streaming call to the model\n   * and returns an object containing a single {@link GenerateContentResponse}.\n   */\n  async generateContent(\n    request: GenerateContentRequest | string | Array<string | Part>\n  ): Promise<GenerateContentResult> {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContent(\n      this._apiSettings,\n      this.model,\n      {\n        generationConfig: this.generationConfig,\n        safetySettings: this.safetySettings,\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        ...formattedParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Makes a single streaming call to the model\n   * and returns an object containing an iterable stream that iterates\n   * over all chunks in the streaming response as well as\n   * a promise that returns the final aggregated response.\n   */\n  async generateContentStream(\n    request: GenerateContentRequest | string | Array<string | Part>\n  ): Promise<GenerateContentStreamResult> {\n    const formattedParams = formatGenerateContentInput(request);\n    return generateContentStream(\n      this._apiSettings,\n      this.model,\n      {\n        generationConfig: this.generationConfig,\n        safetySettings: this.safetySettings,\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        ...formattedParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Gets a new {@link ChatSession} instance which can be used for\n   * multi-turn chats.\n   */\n  startChat(startChatParams?: StartChatParams): ChatSession {\n    return new ChatSession(\n      this._apiSettings,\n      this.model,\n      {\n        tools: this.tools,\n        toolConfig: this.toolConfig,\n        systemInstruction: this.systemInstruction,\n        generationConfig: this.generationConfig,\n        safetySettings: this.safetySettings,\n        /**\n         * Overrides params inherited from GenerativeModel with those explicitly set in the\n         * StartChatParams. For example, if startChatParams.generationConfig is set, it'll override\n         * this.generationConfig.\n         */\n        ...startChatParams\n      },\n      this.requestOptions\n    );\n  }\n\n  /**\n   * Counts the tokens in the provided request.\n   */\n  async countTokens(\n    request: CountTokensRequest | string | Array<string | Part>\n  ): Promise<CountTokensResponse> {\n    const formattedParams = formatGenerateContentInput(request);\n    return countTokens(this._apiSettings, this.model, formattedParams);\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AI } from '../public-types';\nimport { Task, makeRequest } from '../requests/request';\nimport { createPredictRequestBody } from '../requests/request-helpers';\nimport { handlePredictResponse } from '../requests/response-helpers';\nimport {\n  ImagenGCSImage,\n  ImagenGenerationConfig,\n  ImagenInlineImage,\n  RequestOptions,\n  ImagenModelParams,\n  ImagenGenerationResponse,\n  ImagenSafetySettings\n} from '../types';\nimport { AIModel } from './ai-model';\n\n/**\n * Class for Imagen model APIs.\n *\n * This class provides methods for generating images using the Imagen model.\n *\n * @example\n * ```javascript\n * const imagen = new ImagenModel(\n *   ai,\n *   {\n *     model: 'imagen-3.0-generate-002'\n *   }\n * );\n *\n * const response = await imagen.generateImages('A photo of a cat');\n * if (response.images.length > 0) {\n *   console.log(response.images[0].bytesBase64Encoded);\n * }\n * ```\n *\n * @beta\n */\nexport class ImagenModel extends AIModel {\n  /**\n   * The Imagen generation configuration.\n   */\n  generationConfig?: ImagenGenerationConfig;\n  /**\n   * Safety settings for filtering inappropriate content.\n   */\n  safetySettings?: ImagenSafetySettings;\n\n  /**\n   * Constructs a new instance of the {@link ImagenModel} class.\n   *\n   * @param ai - an {@link AI} instance.\n   * @param modelParams - Parameters to use when making requests to Imagen.\n   * @param requestOptions - Additional options to use when making requests.\n   *\n   * @throws If the `apiKey` or `projectId` fields are missing in your\n   * Firebase config.\n   */\n  constructor(\n    ai: AI,\n    modelParams: ImagenModelParams,\n    public requestOptions?: RequestOptions\n  ) {\n    const { model, generationConfig, safetySettings } = modelParams;\n    super(ai, model);\n    this.generationConfig = generationConfig;\n    this.safetySettings = safetySettings;\n  }\n\n  /**\n   * Generates images using the Imagen model and returns them as\n   * base64-encoded strings.\n   *\n   * @param prompt - A text prompt describing the image(s) to generate.\n   * @returns A promise that resolves to an {@link ImagenGenerationResponse}\n   * object containing the generated images.\n   *\n   * @throws If the request to generate images fails. This happens if the\n   * prompt is blocked.\n   *\n   * @remarks\n   * If the prompt was not blocked, but one or more of the generated images were filtered, the\n   * returned object will have a `filteredReason` property.\n   * If all images are filtered, the `images` array will be empty.\n   *\n   * @beta\n   */\n  async generateImages(\n    prompt: string\n  ): Promise<ImagenGenerationResponse<ImagenInlineImage>> {\n    const body = createPredictRequestBody(prompt, {\n      ...this.generationConfig,\n      ...this.safetySettings\n    });\n    const response = await makeRequest(\n      this.model,\n      Task.PREDICT,\n      this._apiSettings,\n      /* stream */ false,\n      JSON.stringify(body),\n      this.requestOptions\n    );\n    return handlePredictResponse<ImagenInlineImage>(response);\n  }\n\n  /**\n   * Generates images to Cloud Storage for Firebase using the Imagen model.\n   *\n   * @internal This method is temporarily internal.\n   *\n   * @param prompt - A text prompt describing the image(s) to generate.\n   * @param gcsURI - The URI of file stored in a Cloud Storage for Firebase bucket.\n   * This should be a directory. For example, `gs://my-bucket/my-directory/`.\n   * @returns A promise that resolves to an {@link ImagenGenerationResponse}\n   * object containing the URLs of the generated images.\n   *\n   * @throws If the request fails to generate images fails. This happens if\n   * the prompt is blocked.\n   *\n   * @remarks\n   * If the prompt was not blocked, but one or more of the generated images were filtered, the\n   * returned object will have a `filteredReason` property.\n   * If all images are filtered, the `images` array will be empty.\n   */\n  async generateImagesGCS(\n    prompt: string,\n    gcsURI: string\n  ): Promise<ImagenGenerationResponse<ImagenGCSImage>> {\n    const body = createPredictRequestBody(prompt, {\n      gcsURI,\n      ...this.generationConfig,\n      ...this.safetySettings\n    });\n    const response = await makeRequest(\n      this.model,\n      Task.PREDICT,\n      this._apiSettings,\n      /* stream */ false,\n      JSON.stringify(body),\n      this.requestOptions\n    );\n    return handlePredictResponse<ImagenGCSImage>(response);\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AIError } from '../errors';\nimport { AIErrorCode } from '../types';\nimport {\n  SchemaInterface,\n  SchemaType,\n  SchemaParams,\n  SchemaRequest,\n  ObjectSchemaInterface\n} from '../types/schema';\n\n/**\n * Parent class encompassing all Schema types, with static methods that\n * allow building specific Schema types. This class can be converted with\n * `JSON.stringify()` into a JSON string accepted by Vertex AI REST endpoints.\n * (This string conversion is automatically done when calling SDK methods.)\n * @public\n */\nexport abstract class Schema implements SchemaInterface {\n  /**\n   * Optional. The type of the property. {@link\n   * SchemaType}.\n   */\n  type: SchemaType;\n  /** Optional. The format of the property.\n   * Supported formats:<br/>\n   * <ul>\n   *  <li>for NUMBER type: \"float\", \"double\"</li>\n   *  <li>for INTEGER type: \"int32\", \"int64\"</li>\n   *  <li>for STRING type: \"email\", \"byte\", etc</li>\n   * </ul>\n   */\n  format?: string;\n  /** Optional. The description of the property. */\n  description?: string;\n  /** Optional. The items of the property. */\n  items?: SchemaInterface;\n  /** The minimum number of items (elements) in a schema of type {@link SchemaType.ARRAY}. */\n  minItems?: number;\n  /** The maximum number of items (elements) in a schema of type {@link SchemaType.ARRAY}. */\n  maxItems?: number;\n  /** Optional. Whether the property is nullable. Defaults to false. */\n  nullable: boolean;\n  /** Optional. The example of the property. */\n  example?: unknown;\n  /**\n   * Allows user to add other schema properties that have not yet\n   * been officially added to the SDK.\n   */\n  [key: string]: unknown;\n\n  constructor(schemaParams: SchemaInterface) {\n    // eslint-disable-next-line guard-for-in\n    for (const paramKey in schemaParams) {\n      this[paramKey] = schemaParams[paramKey];\n    }\n    // Ensure these are explicitly set to avoid TS errors.\n    this.type = schemaParams.type;\n    this.nullable = schemaParams.hasOwnProperty('nullable')\n      ? !!schemaParams.nullable\n      : false;\n  }\n\n  /**\n   * Defines how this Schema should be serialized as JSON.\n   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#tojson_behavior\n   * @internal\n   */\n  toJSON(): SchemaRequest {\n    const obj: { type: SchemaType; [key: string]: unknown } = {\n      type: this.type\n    };\n    for (const prop in this) {\n      if (this.hasOwnProperty(prop) && this[prop] !== undefined) {\n        if (prop !== 'required' || this.type === SchemaType.OBJECT) {\n          obj[prop] = this[prop];\n        }\n      }\n    }\n    return obj as SchemaRequest;\n  }\n\n  static array(arrayParams: SchemaParams & { items: Schema }): ArraySchema {\n    return new ArraySchema(arrayParams, arrayParams.items);\n  }\n\n  static object(\n    objectParams: SchemaParams & {\n      properties: {\n        [k: string]: Schema;\n      };\n      optionalProperties?: string[];\n    }\n  ): ObjectSchema {\n    return new ObjectSchema(\n      objectParams,\n      objectParams.properties,\n      objectParams.optionalProperties\n    );\n  }\n\n  // eslint-disable-next-line id-blacklist\n  static string(stringParams?: SchemaParams): StringSchema {\n    return new StringSchema(stringParams);\n  }\n\n  static enumString(\n    stringParams: SchemaParams & { enum: string[] }\n  ): StringSchema {\n    return new StringSchema(stringParams, stringParams.enum);\n  }\n\n  static integer(integerParams?: SchemaParams): IntegerSchema {\n    return new IntegerSchema(integerParams);\n  }\n\n  // eslint-disable-next-line id-blacklist\n  static number(numberParams?: SchemaParams): NumberSchema {\n    return new NumberSchema(numberParams);\n  }\n\n  // eslint-disable-next-line id-blacklist\n  static boolean(booleanParams?: SchemaParams): BooleanSchema {\n    return new BooleanSchema(booleanParams);\n  }\n}\n\n/**\n * A type that includes all specific Schema types.\n * @public\n */\nexport type TypedSchema =\n  | IntegerSchema\n  | NumberSchema\n  | StringSchema\n  | BooleanSchema\n  | ObjectSchema\n  | ArraySchema;\n\n/**\n * Schema class for \"integer\" types.\n * @public\n */\nexport class IntegerSchema extends Schema {\n  constructor(schemaParams?: SchemaParams) {\n    super({\n      type: SchemaType.INTEGER,\n      ...schemaParams\n    });\n  }\n}\n\n/**\n * Schema class for \"number\" types.\n * @public\n */\nexport class NumberSchema extends Schema {\n  constructor(schemaParams?: SchemaParams) {\n    super({\n      type: SchemaType.NUMBER,\n      ...schemaParams\n    });\n  }\n}\n\n/**\n * Schema class for \"boolean\" types.\n * @public\n */\nexport class BooleanSchema extends Schema {\n  constructor(schemaParams?: SchemaParams) {\n    super({\n      type: SchemaType.BOOLEAN,\n      ...schemaParams\n    });\n  }\n}\n\n/**\n * Schema class for \"string\" types. Can be used with or without\n * enum values.\n * @public\n */\nexport class StringSchema extends Schema {\n  enum?: string[];\n  constructor(schemaParams?: SchemaParams, enumValues?: string[]) {\n    super({\n      type: SchemaType.STRING,\n      ...schemaParams\n    });\n    this.enum = enumValues;\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): SchemaRequest {\n    const obj = super.toJSON();\n    if (this.enum) {\n      obj['enum'] = this.enum;\n    }\n    return obj as SchemaRequest;\n  }\n}\n\n/**\n * Schema class for \"array\" types.\n * The `items` param should refer to the type of item that can be a member\n * of the array.\n * @public\n */\nexport class ArraySchema extends Schema {\n  constructor(schemaParams: SchemaParams, public items: TypedSchema) {\n    super({\n      type: SchemaType.ARRAY,\n      ...schemaParams\n    });\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): SchemaRequest {\n    const obj = super.toJSON();\n    obj.items = this.items.toJSON();\n    return obj;\n  }\n}\n\n/**\n * Schema class for \"object\" types.\n * The `properties` param must be a map of `Schema` objects.\n * @public\n */\nexport class ObjectSchema extends Schema {\n  constructor(\n    schemaParams: SchemaParams,\n    public properties: {\n      [k: string]: TypedSchema;\n    },\n    public optionalProperties: string[] = []\n  ) {\n    super({\n      type: SchemaType.OBJECT,\n      ...schemaParams\n    });\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): SchemaRequest {\n    const obj = super.toJSON();\n    obj.properties = { ...this.properties };\n    const required = [];\n    if (this.optionalProperties) {\n      for (const propertyKey of this.optionalProperties) {\n        if (!this.properties.hasOwnProperty(propertyKey)) {\n          throw new AIError(\n            AIErrorCode.INVALID_SCHEMA,\n            `Property \"${propertyKey}\" specified in \"optionalProperties\" does not exist.`\n          );\n        }\n      }\n    }\n    for (const propertyKey in this.properties) {\n      if (this.properties.hasOwnProperty(propertyKey)) {\n        obj.properties[propertyKey] = this.properties[\n          propertyKey\n        ].toJSON() as SchemaRequest;\n        if (!this.optionalProperties.includes(propertyKey)) {\n          required.push(propertyKey);\n        }\n      }\n    }\n    if (required.length > 0) {\n      obj.required = required;\n    }\n    delete (obj as ObjectSchemaInterface).optionalProperties;\n    return obj as SchemaRequest;\n  }\n}\n", "/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from '../logger';\n\n/**\n * Defines the image format for images generated by Imagen.\n *\n * Use this class to specify the desired format (JPEG or PNG) and compression quality\n * for images generated by Imagen. This is typically included as part of\n * {@link ImagenModelParams}.\n *\n * @example\n * ```javascript\n * const imagenModelParams = {\n *   // ... other ImagenModelParams\n *   imageFormat: ImagenImageFormat.jpeg(75) // JPEG with a compression level of 75.\n * }\n * ```\n *\n * @beta\n */\nexport class ImagenImageFormat {\n  /**\n   * The MIME type.\n   */\n  mimeType: string;\n  /**\n   * The level of compression (a number between 0 and 100).\n   */\n  compressionQuality?: number;\n\n  private constructor() {\n    this.mimeType = 'image/png';\n  }\n\n  /**\n   * Creates an {@link ImagenImageFormat} for a JPEG image.\n   *\n   * @param compressionQuality - The level of compression (a number between 0 and 100).\n   * @returns An {@link ImagenImageFormat} object for a JPEG image.\n   *\n   * @beta\n   */\n  static jpeg(compressionQuality?: number): ImagenImageFormat {\n    if (\n      compressionQuality &&\n      (compressionQuality < 0 || compressionQuality > 100)\n    ) {\n      logger.warn(\n        `Invalid JPEG compression quality of ${compressionQuality} specified; the supported range is [0, 100].`\n      );\n    }\n    return { mimeType: 'image/jpeg', compressionQuality };\n  }\n\n  /**\n   * Creates an {@link ImagenImageFormat} for a PNG image.\n   *\n   * @returns An {@link ImagenImageFormat} object for a PNG image.\n   *\n   * @beta\n   */\n  static png(): ImagenImageFormat {\n    return { mimeType: 'image/png' };\n  }\n}\n", "/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { getModularInstance } from '@firebase/util';\nimport { AI_TYPE } from './constants';\nimport { AIService } from './service';\nimport { AI, AIOptions, VertexAI, VertexAIOptions } from './public-types';\nimport {\n  ImagenModelParams,\n  ModelParams,\n  RequestOptions,\n  AIErrorCode\n} from './types';\nimport { AIError } from './errors';\nimport { AIModel, GenerativeModel, ImagenModel } from './models';\nimport { encodeInstanceIdentifier } from './helpers';\nimport { GoogleAIBackend, VertexAIBackend } from './backend';\n\nexport { ChatSession } from './methods/chat-session';\nexport * from './requests/schema-builder';\nexport { ImagenImageFormat } from './requests/imagen-image-format';\nexport { AIModel, GenerativeModel, ImagenModel, AIError };\nexport { Backend, VertexAIBackend, GoogleAIBackend } from './backend';\n\nexport { AIErrorCode as VertexAIErrorCode };\n\n/**\n * @deprecated Use the new {@link AIModel} instead. The Vertex AI in Firebase SDK has been\n * replaced with the Firebase AI SDK to accommodate the evolving set of supported features and\n * services. For migration details, see the {@link https://firebase.google.com/docs/vertex-ai/migrate-to-latest-sdk | migration guide}.\n *\n * Base class for Firebase AI model APIs.\n *\n * @public\n */\nexport const VertexAIModel = AIModel;\n\n/**\n * @deprecated Use the new {@link AIError} instead. The Vertex AI in Firebase SDK has been\n * replaced with the Firebase AI SDK to accommodate the evolving set of supported features and\n * services. For migration details, see the {@link https://firebase.google.com/docs/vertex-ai/migrate-to-latest-sdk | migration guide}.\n *\n * Error class for the Firebase AI SDK.\n *\n * @public\n */\nexport const VertexAIError = AIError;\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [AI_TYPE]: AIService;\n  }\n}\n\n/**\n * @deprecated Use the new {@link getAI | getAI()} instead. The Vertex AI in Firebase SDK has been\n * replaced with the Firebase AI SDK to accommodate the evolving set of supported features and\n * services. For migration details, see the {@link https://firebase.google.com/docs/vertex-ai/migrate-to-latest-sdk | migration guide}.\n *\n * Returns a {@link VertexAI} instance for the given app, configured to use the\n * Vertex AI Gemini API. This instance will be\n * configured to use the Vertex AI Gemini API.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param options - Options to configure the Vertex AI instance, including the location.\n *\n * @public\n */\nexport function getVertexAI(\n  app: FirebaseApp = getApp(),\n  options?: VertexAIOptions\n): VertexAI {\n  app = getModularInstance(app);\n  // Dependencies\n  const AIProvider: Provider<'AI'> = _getProvider(app, AI_TYPE);\n\n  const backend = new VertexAIBackend(options?.location);\n  const identifier = encodeInstanceIdentifier(backend);\n  return AIProvider.getImmediate({\n    identifier\n  });\n}\n\n/**\n * Returns the default {@link AI} instance that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new instance with the\n * default settings.\n *\n * @example\n * ```javascript\n * const ai = getAI(app);\n * ```\n *\n * @example\n * ```javascript\n * // Get an AI instance configured to use the Gemini Developer API (via Google AI).\n * const ai = getAI(app, { backend: new GoogleAIBackend() });\n * ```\n *\n * @example\n * ```javascript\n * // Get an AI instance configured to use the Vertex AI Gemini API.\n * const ai = getAI(app, { backend: new VertexAIBackend() });\n * ```\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param options - {@link AIOptions} that configure the AI instance.\n * @returns The default {@link AI} instance for the given {@link @firebase/app#FirebaseApp}.\n *\n * @public\n */\nexport function getAI(\n  app: FirebaseApp = getApp(),\n  options: AIOptions = { backend: new GoogleAIBackend() }\n): AI {\n  app = getModularInstance(app);\n  // Dependencies\n  const AIProvider: Provider<'AI'> = _getProvider(app, AI_TYPE);\n\n  const identifier = encodeInstanceIdentifier(options.backend);\n  return AIProvider.getImmediate({\n    identifier\n  });\n}\n\n/**\n * Returns a {@link GenerativeModel} class with methods for inference\n * and other functionality.\n *\n * @public\n */\nexport function getGenerativeModel(\n  ai: AI,\n  modelParams: ModelParams,\n  requestOptions?: RequestOptions\n): GenerativeModel {\n  if (!modelParams.model) {\n    throw new AIError(\n      AIErrorCode.NO_MODEL,\n      `Must provide a model name. Example: getGenerativeModel({ model: 'my-model-name' })`\n    );\n  }\n  return new GenerativeModel(ai, modelParams, requestOptions);\n}\n\n/**\n * Returns an {@link ImagenModel} class with methods for using Imagen.\n *\n * Only Imagen 3 models (named `imagen-3.0-*`) are supported.\n *\n * @param ai - An {@link AI} instance.\n * @param modelParams - Parameters to use when making Imagen requests.\n * @param requestOptions - Additional options to use when making requests.\n *\n * @throws If the `apiKey` or `projectId` fields are missing in your\n * Firebase config.\n *\n * @beta\n */\nexport function getImagenModel(\n  ai: AI,\n  modelParams: ImagenModelParams,\n  requestOptions?: RequestOptions\n): ImagenModel {\n  if (!modelParams.model) {\n    throw new AIError(\n      AIErrorCode.NO_MODEL,\n      `Must provide a model name. Example: getImagenModel({ model: 'my-model-name' })`\n    );\n  }\n  return new ImagenModel(ai, modelParams, requestOptions);\n}\n", "/**\n * The Firebase AI Web SDK.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { AIService } from './service';\nimport { AI_TYPE } from './constants';\nimport { Component, ComponentType } from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { decodeInstanceIdentifier } from './helpers';\nimport { AIError } from './api';\nimport { AIErrorCode } from './types';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAI(): void {\n  _registerComponent(\n    new Component(\n      AI_TYPE,\n      (container, { instanceIdentifier }) => {\n        if (!instanceIdentifier) {\n          throw new AIError(\n            AIErrorCode.ERROR,\n            'AIService instance identifier is undefined.'\n          );\n        }\n\n        const backend = decodeInstanceIdentifier(instanceIdentifier);\n\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const auth = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return new AIService(app, backend, auth, appCheckProvider);\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterAI();\n\nexport * from './api';\nexport * from './public-types';\n"],
  "mappings": "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",
  "names": ["HarmCategory", "HarmBlockThreshold", "HarmBlockMethod", "HarmProbability", "HarmSeverity", "BlockReason", "FinishReason", "FunctionCallingMode", "Modality", "SchemaType", "ImagenSafetyFilterLevel", "ImagenPersonFilterLevel", "ImagenAspectRatio", "Task", "_a", "GoogleAIMapper.mapGenerateContentResponse", "GoogleAIMapper.mapGenerateContentRequest", "_b", "GoogleAIMapper.mapCountTokensRequest"]
}
